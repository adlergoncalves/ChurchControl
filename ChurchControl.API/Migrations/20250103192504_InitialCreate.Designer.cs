// <auto-generated />
using System;
using ChurchControl.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChurchControl.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250103192504_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChurchControl.API.Data.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ChurchControl.API.Data.Meds", b =>
                {
                    b.HasBaseType("ChurchControl.API.Data.Pessoa");

                    b.Property<bool>("Batizado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataConversao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DesejaSerVisitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdUnidade")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoConversao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Meds", (string)null);
                });

            modelBuilder.Entity("ChurchControl.API.Data.Membro", b =>
                {
                    b.HasBaseType("ChurchControl.API.Data.Pessoa");

                    b.Property<bool>("ConcluiuCursoCapacitacao")
                        .HasColumnType("bit");

                    b.Property<string>("Conjuge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ConjugeBatizado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataDesligamento")
                        .HasColumnType("datetime2");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUnidade")
                        .HasColumnType("int");

                    b.Property<bool>("MembroBatizado")
                        .HasColumnType("bit");

                    b.Property<bool>("MembroDaIgreja")
                        .HasColumnType("bit");

                    b.Property<string>("MotivoDesligamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeConjuge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeUltimoPastor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PossuiFilhos")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelefoneUltimoPastor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Membros", (string)null);
                });

            modelBuilder.Entity("ChurchControl.API.Data.Visitante", b =>
                {
                    b.HasBaseType("ChurchControl.API.Data.Pessoa");

                    b.Property<DateTime>("DataVisita")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DesejaSerVisitado")
                        .HasColumnType("bit");

                    b.Property<int>("IdUnidade")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Visitantes", (string)null);
                });

            modelBuilder.Entity("ChurchControl.API.Data.Meds", b =>
                {
                    b.HasOne("ChurchControl.API.Data.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("ChurchControl.API.Data.Meds", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChurchControl.API.Data.Membro", b =>
                {
                    b.HasOne("ChurchControl.API.Data.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("ChurchControl.API.Data.Membro", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChurchControl.API.Data.Visitante", b =>
                {
                    b.HasOne("ChurchControl.API.Data.Pessoa", null)
                        .WithOne()
                        .HasForeignKey("ChurchControl.API.Data.Visitante", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
